{
	"info": {
		"_postman_id": "10497157-e7a8b500-dd6f-440f-a45b-369cbd158015",
		"name": "[Monitor] [Sanity] API Specification service",
		"description": "Debugging steps if you see failures in this reported via the monitors:\n\n[https://whimsical.com/triage-monitor-failures-868kMPybZfPsAxrrT8NF62](https://whimsical.com/triage-monitor-failures-868kMPybZfPsAxrrT8NF62)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create & fetch spec",
			"item": [
				{
					"name": "Create Spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdf8bc2f-3456-4818-8357-6d670f9e7601",
								"exec": [
									"try {",
									"    const {retryOnFailure} = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    if (pm.response.code !== 201)  {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test(\"Response is an object with meta and data properties\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData).to.have.property('meta');",
									"        pm.expect(jsonData).to.have.property('data');",
									"    });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"        var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"                meta: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        action: { type: \"string\" },",
									"                        model: { type: \"string\" }",
									"                    }",
									"                },",
									"                data: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"string\" },",
									"                        name: { type: \"string\" },",
									"                        type: { type: \"string\" },",
									"                        createdBy: { type: \"string\" },",
									"                        updatedBy: { type: \"string\" },",
									"                        description: { type: \"string\" },",
									"                        updatedAt: { type: \"string\" },",
									"                        createdAt: { type: \"string\" }",
									"                    },",
									"                    required: [\"id\", \"name\", \"type\", \"createdBy\", \"updatedBy\", \"description\", \"updatedAt\", \"createdAt\"]",
									"                }",
									"            },",
									"            required: [\"meta\", \"data\"]",
									"        };",
									"",
									"        var response = pm.response.json();",
									"        pm.expect(tv4.validate(response, schema)).to.be.true;",
									"",
									"        // set spec Id",
									"        pm.environment.set(\"specificationId1\", response.data.id);",
									"",
									"        console.log('Specification ID:', response.data.id);",
									"    });",
									"",
									"    // Retrieve the saved \"id\" value from the variable",
									"    pm.test(\"Validate response against saved 'id' value\", function () {",
									"        var savedName = \"Spec1\";",
									"        var savedType = \"OPENAPI:3.0\";",
									"        var responseBody = pm.response.json();",
									"        var { name, type } = responseBody.data;",
									"",
									"        pm.expect(name).to.equal(savedName);",
									"        pm.expect(type).to.equal(savedType);",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6eb59706-e479-4ef7-a340-d16fe2b0dc49",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6294718-6e6b18b2-78f0-4b97-9faa-b86c565da9b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/specifications\",\n    \"query\": {\n        \"containerType\": \"workspace\",\n        \"containerId\": \"{{workspaceId}}\"\n    },\n    \"body\": {\n        \"name\": \"Spec1\",\n        \"description\": \"this is a demo API\",\n        \"type\": \"OPENAPI:3.0\",\n        \"files\": [\n            {\n                \"path\": \"index.yml\",\n                \"content\": \"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - name\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\",\n                \"type\": \"ROOT\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Specs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ce97c6a-353a-4560-afec-d967865103f3",
								"exec": [
									"const Ajv = require('ajv');",
									"",
									"try {",
									"    const {retryOnFailure} = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"        console.log(pm.response.json());",
									"        var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"                meta: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        action: { type: \"string\" },",
									"                        model: { type: \"string\" },",
									"                        cursor: {",
									"                            type: \"object\",",
									"                            properties: {",
									"                                next: { type: [\"string\", \"null\"] }",
									"                            },",
									"                            required: [\"next\"]",
									"                        }",
									"                    },",
									"                    required: [\"action\", \"model\", \"cursor\"]",
									"                },",
									"                data: {",
									"                    type: \"array\",",
									"                    items: {",
									"                        type: \"object\",",
									"                        properties: {",
									"                            id: { type: \"string\" },",
									"                            type: { type: \"string\" },",
									"                            name: { type: \"string\" },",
									"                            description: { type: [\"string\", \"null\"]},",
									"                            createdBy: { type: \"string\" },",
									"                            updatedBy: { type: \"string\" },",
									"                            createdAt: { type: \"string\" },",
									"                            updatedAt: { type: \"string\" }",
									"                        },",
									"                        required: [\"id\", \"type\", \"name\", \"description\", \"createdBy\", \"updatedBy\", \"createdAt\", \"updatedAt\"]",
									"                    }",
									"                }",
									"            },",
									"            required: [\"meta\", \"data\"]",
									"        };",
									"",
									"        var response = pm.response.json();",
									"        const validator = new Ajv({logger: console, allErrors: true});",
									"        console.log(validator.validate(schema, response), validator.errors)",
									"        pm.expect(validator.validate(schema, response)).to.be.true;",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-f853ced6-6a3b-44e9-ac06-af1116fee189",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications\",\n    \"query\": {\n        \"containerType\": \"workspace\",\n        \"containerId\": \"{{workspaceId}}\",\n        \"limit\": 10\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							],
							"query": [
								{
									"key": "cursor",
									"value": "eyJvcmRlckJ5IjpbeyJwaXZvdCI6ImNyZWF0ZWRBdCIsInNjaGVtZSI6IkRFU0MiLCJ2YWx1ZSI6IjIwMjQtMDItMjNUMTI6MzQ6MzQuMDAwWiJ9LHsicGl2b3QiOiJpZCIsInNjaGVtZSI6IkRFU0MiLCJ2YWx1ZSI6ImI5ZGExZWI4LTIzMjUtNDEzOS1iM2Y2LWE3NjQ5MDNlMTNlOCJ9XSwiZGlyZWN0aW9uIjoibmV4dCJ9",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List One Spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3de72da-f99d-43ab-af4f-20a15093748e",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response is an object with meta and data properties\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData).to.be.an('object');",
									"            pm.expect(jsonData).to.have.property('meta');",
									"            pm.expect(jsonData).to.have.property('data');",
									"        });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"        var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"                meta: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        action: { type: \"string\" },",
									"                        model: { type: \"string\" }",
									"                    }",
									"                },",
									"                data: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"string\" },",
									"                        name: { type: \"string\" },",
									"                        type: { type: \"string\" },",
									"                        createdBy: { type: \"string\" },",
									"                        updatedBy: { type: \"string\" },",
									"                        description: { type: \"string\" },",
									"                        updatedAt: { type: \"string\" },",
									"                        createdAt: { type: \"string\" }",
									"                    },",
									"                    required: [\"id\", \"name\", \"type\", \"createdBy\", \"updatedBy\", \"description\", \"updatedAt\", \"createdAt\"]",
									"                }",
									"            },",
									"            required: [\"meta\", \"data\"]",
									"        };",
									"",
									"        var response = pm.response.json();",
									"        pm.expect(tv4.validate(response, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Validate response against saved 'id' value\", function () {",
									"        var savedId = pm.environment.get(\"specificationId1\");",
									"",
									"        var responseBody = pm.response.json(),",
									"            responseId = responseBody.data.id;",
									"",
									"        pm.expect(responseId).to.be.eql(savedId);",
									"    });",
									"",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-8af42308-36c8-46fd-aa84-cab4d8da7f02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}\",\n    \"query\": {\n        \"containerType\": \"workspace\",\n        \"containerId\": \"{{workspaceId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response has the required meta object\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"        pm.expect(responseData.meta.action).to.exist;",
									"        pm.expect(responseData.meta.model).to.exist;",
									"        pm.expect(responseData.meta.cursor).to.exist.and.to.be.an('object');",
									"    });",
									"",
									"",
									"    pm.test(\"Each data object contains the required fields\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData.data).to.be.an('array');",
									"",
									"        responseData.data.forEach(function (dataObj) {",
									"            pm.expect(dataObj).to.include.all.keys('content', 'path', 'name', 'id', 'fileType', 'type');",
									"        });",
									"    });",
									"",
									"",
									"    pm.test(\"Cursor object contains a next property\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData.meta.cursor).to.exist;",
									"        pm.expect(responseData.meta.cursor.next).to.be.null;",
									"    });",
									"",
									"",
									"    pm.test(\"File type is in a valid format\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData).to.be.an('object');",
									"        responseData.data.forEach(function (item) {",
									"            pm.expect(item.fileType).to.match(/[a-zA-Z]+/, \"File type should be a valid format\");",
									"        });",
									"",
									"        // save file id for update file API",
									"        const fileId = responseData.data[0].id;",
									"        pm.environment.set(\"fileId\", fileId);",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-e52ff7bc-ba54-4b1c-af91-937f466d191c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}/tree\",\n    \"query\": {\n        \"fields\": \"content,path,name,id,fileType,type\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6294718-ed484615-9a74-4c8e-805e-6fccc165a264"
		},
		{
			"name": "Collection generation",
			"item": [
				{
					"name": "Generate collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c941f6-65f9-4de9-a716-79cfd081acc8",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 202\", function () {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"",
									"    if (pm.response.code !== 202)  {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test(\"Response has the required fields - 'meta' and 'data'\", function () {",
									"        const responseData = pm.response.json();",
									"        ",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData).to.have.property('meta');",
									"        pm.expect(responseData).to.have.property('data');",
									"    });",
									"",
									"",
									"    pm.test(\"TaskId in the response data is a non-empty string\", function () {",
									"        const responseData = pm.response.json();",
									"        ",
									"        pm.expect(responseData.data.taskId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TaskId should be a non-empty string\");",
									"",
									"        pm.environment.set(\"taskId\", responseData.data.taskId);",
									"    });",
									"",
									"",
									"    pm.test(\"Content type is application/json\", function () {",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"    ",
									"",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"    pm.execution.setNextRequest('Add folder');",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-bf06f63d-e848-46fa-a2d3-96cdf759beab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/specifications/{{specificationId1}}/collections\",\n    \"body\": {\n        \"name\": \"C1\",\n        \"options\": {\n            \"enableOptionalParameters\": true,\n            \"folderStrategy\": \"Tags\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List generation task status - until finished",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e85ec91d-2d75-4098-b9be-d0b35ee2c90f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Generation is successful\", function () {",
									"        var response = pm.response.json();",
									"        pm.expect(response).to.have.property('meta');",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('model').is.equal('Task');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('action').is.equal('list');",
									"        pm.expect(response.data).to.be.an('object').that.has.property(pm.environment.get('taskId'));",
									"",
									"        const currentRetryCount = Number(pm.environment.get('generationStatusRetryCount'));",
									"",
									"        console.log('retryCount',currentRetryCount );",
									"",
									"        if ( currentRetryCount > 5) {",
									"            console.log('Exceeded retries');",
									"",
									"            throw 'Exceeded retries';",
									"        } else if (response.data[pm.environment.get('taskId')] === 'in-progress') {",
									"            pm.environment.set('generationStatusRetryCount', currentRetryCount + 1);",
									"",
									"            pm.execution.setNextRequest('List generation task status - until finished');",
									"        } else if (response.data[pm.environment.get('taskId')] === 'failed') {",
									"            throw 'Status: failed';",
									"        }",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"    ",
									"    pm.execution.setNextRequest('Add folder');",
									"} finally {",
									"    pm.environment.set('generationStatusRetryCount', 0);",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1beb0a1c-8439-4e42-bca3-88a22717f457",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6294718-002173ca-deee-4fac-9bb2-6f1479a63f3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/tasks?entityId={{specificationId1}}&entityType=specification&type=collection-generation\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						},
						"description": "Assert task staus to be successful"
					},
					"response": []
				},
				{
					"name": "List generated collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c8dd9f5-0b0d-4c6e-9ba6-5ac75e9f87ca",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Response status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Success response\", function () {",
									"        var response = pm.response.json();",
									"        pm.expect(response).to.have.property('meta');",
									"        pm.expect(response.meta).to.have.property('cursor');",
									"        pm.expect(response.meta.cursor).to.have.property('next');",
									"",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('model');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('action');",
									"        pm.expect(response.data).to.be.an('array').that.has.length(1);",
									"",
									"        pm.expect(response.data[0]).to.be.an('object').that.has.property('state').is.equal('in-sync');",
									"",
									"        // Set the collectionId as variable",
									"        pm.environment.set('collectionId', response.data[0].collection);",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"    pm.execution.setNextRequest('Add folder');",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-813c2110-b38c-4497-bc0c-622b297903bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}/collections\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6294718-02c60b32-063c-4926-b086-1c9b4ebd75f5"
		},
		{
			"name": "File & Folder create,update",
			"item": [
				{
					"name": "Add folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {    ",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    if (pm.response.code !== 201)  {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test('Response body is valid', function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData).to.have.all.keys(['meta', 'data']);",
									"    });",
									"",
									"    pm.test(\"Response body.meta is valid\", function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.meta).to.be.an('object');",
									"        pm.expect(jsonData.meta).to.have.property('model', 'SpecificationFolder');",
									"        pm.expect(jsonData.meta).to.have.property('action', 'create');",
									"    });",
									"",
									"    pm.test(\"Response body.data is valid\", function () {",
									"        var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.data).to.be.an('object');",
									"        pm.expect(jsonData.data).to.have.all.keys(['id', 'name', 'createdBy', 'updatedBy', 'createdAt', 'updatedAt']);",
									"",
									"        pm.environment.set(\"spec1FolderId1\", jsonData.data.id);",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-d0caf040-568c-4234-a367-3b8117232b45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/specifications/{{specificationId1}}/folders\",\n    \"body\": {\n        \"name\": \"folder1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test('Response body is valid', function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData).to.have.all.keys(['meta', 'data']);",
									"    });",
									"",
									"    pm.test(\"Response body.meta is valid\", function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.meta).to.be.an('object');",
									"        pm.expect(jsonData.meta).to.have.property('model', 'SpecificationFolder');",
									"        pm.expect(jsonData.meta).to.have.property('action', 'patch');",
									"    });",
									"",
									"    pm.test(\"Response body.data is valid\", function () {",
									"        var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.data).to.be.an('object');",
									"        pm.expect(jsonData.data).to.have.all.keys('id');",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-d2fab744-c2da-4321-b610-b26f95a5fc3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"patch\",\n    \"path\": \"/specifications/{{specificationId1}}/folders/{{spec1FolderId1}}\",\n    \"body\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/name\",\n            \"value\": \"folder1Updated\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updated folder record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate updated folder\", function(){",
									"        const responseData = pm.response.json(),",
									"        targetFolderId = pm.environment.get(\"spec1FolderId1\"),",
									"        updatedFolder = responseData.data;",
									"",
									"        pm.expect(updatedFolder.id).to.be.eql(targetFolderId);",
									"        pm.expect(updatedFolder.name).to.be.eql(\"folder1Updated\");",
									"    })",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "39321850-b5edfa8e-8832-43f4-ad32-597c58fcf750",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}/folders/{{spec1FolderId1}}\",\n    \"query\": {\n        \"fields\": \"path,name,id\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    if (pm.response.code !== 201) {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"        var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"                meta: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        model: { type: \"string\" },",
									"                        action: { type: \"string\" }",
									"                    },",
									"                    required: [\"model\", \"action\"]",
									"                },",
									"                data: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"string\" },",
									"                        name: { type: \"string\" },",
									"                        createdBy: { type: \"string\" },",
									"                        updatedBy: { type: \"string\" },",
									"                        createdAt: { type: \"string\" },",
									"                        updatedAt: { type: \"string\" }",
									"                    },",
									"                    required: [\"id\", \"name\", \"createdBy\", \"updatedBy\", \"createdAt\", \"updatedAt\"]",
									"                }",
									"            },",
									"            required: [\"meta\", \"data\"]",
									"        };",
									"",
									"        var response = pm.response.json();",
									"        pm.expect(tv4.validate(response, schema)).to.be.true;",
									"",
									"        pm.environment.set('fileIdToBeDeleted', response.data.id);",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-ca2a78c0-3750-4c7f-a832-93e21327d107",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/specifications/{{specificationId1}}/files\",\n    \"body\": {\n        \"name\": \"user.yaml\",\n        \"content\": \"new schema\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate file\", function(){",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData.data.length).to.eql(2);",
									"        pm.expect(responseData.data[0]).to.have.all.keys('id','name', 'content')",
									"        console.log(responseData);",
									"        console.log(pm.environment.get(\"fileId\"))",
									"",
									"        const targetFileId = pm.environment.get(\"fileId\"),",
									"        file = _.find(responseData.data,{id:targetFileId});",
									"        console.log(file);",
									"",
									"        pm.expect(file.id).to.be.eql(targetFileId);",
									"        pm.expect(file.content).to.be.eql(\"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - name\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\"",
									");",
									"        pm.expect(file.name).to.be.eql(\"index.yml\");",
									"    })",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "39321850-ee40cd69-7ef0-4984-b279-3fb61fd6d779",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}/files\",\n    \"query\": {\n        \"fields\": \"content,name,id\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update file content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"validate content\", function () {",
									"        var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData.meta).to.be.an('object');",
									"        pm.expect(jsonData.meta).to.have.property('model');",
									"        pm.expect(jsonData.meta).to.have.property('action');",
									"        pm.expect(jsonData.data).to.be.an('object');",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');",
									"        pm.expect(jsonData.data).to.have.property('updatedBy');",
									"",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-9996942c-945b-4d34-b490-1ce54733bf4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"patch\",\n    \"path\": \"/specifications/{{specificationId1}}/files/{{fileId}}\",\n    \"body\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/content\",\n            \"value\": \"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent another spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - name\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updated file record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate updated file\", function(){",
									"        const responseData = pm.response.json(),",
									"        targetFileId = pm.environment.get(\"fileId\"),",
									"        updatedFile = responseData.data;",
									"",
									"        pm.expect(updatedFile.id).to.be.eql(targetFileId);",
									"        pm.expect(updatedFile.content).to.be.eql(\"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent another spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided spacecraftId\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - name\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\");",
									"        pm.expect(updatedFile.name).to.be.eql(\"index.yml\");",
									"    })",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-41a9368e-d2e2-4794-ae77-7ff1e98305fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/specifications/{{specificationId1}}/files/{{fileId}}\",\n    \"query\": {\n        \"fields\": \"content,path,name,id,type\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6294718-74501095-7520-4ae5-b00e-3294f634c86b"
		},
		{
			"name": "Collection syncing",
			"item": [
				{
					"name": "Sync collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f79f75e2-21a9-4289-9f26-1fe2cc942372",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 202\", function () {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"",
									"    if (pm.response.code !== 202)  {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test(\"Response has the required fields - 'meta' and 'data'\", function () {",
									"        const responseData = pm.response.json();",
									"        ",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData).to.have.property('meta');",
									"        pm.expect(responseData).to.have.property('data');",
									"    });",
									"",
									"",
									"    pm.test(\"TaskId in the response data is a non-empty string\", function () {",
									"        const responseData = pm.response.json();",
									"        ",
									"        pm.expect(responseData.data.taskId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TaskId should be a non-empty string\");",
									"",
									"        pm.environment.set(\"taskId\", responseData.data.taskId);",
									"    });",
									"",
									"",
									"    pm.test(\"Content type is application/json\", function () {",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"    ",
									"",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"    pm.execution.setNextRequest('Delete file');",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-fee44975-be02-43d0-aa9b-a6952cb6be94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/specifications/{{specificationId1}}/collections/{{collectionId}}/sync\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List syncing task status - until finished",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "148cb993-1404-4334-ab7d-95415468f46d",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Response status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Syncing is successful\", function () {",
									"        var response = pm.response.json();",
									"        pm.expect(response).to.have.property('meta');",
									"        pm.expect(response).to.have.property('data');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('model');",
									"        pm.expect(response.meta).to.be.an('object').that.has.property('action');",
									"        pm.expect(response.data).to.be.an('object').that.has.property(pm.environment.get('taskId'));",
									"",
									"        const currentRetryCount = Number(pm.environment.get('syncingStatusRetryCount'));",
									"",
									"        if (currentRetryCount > 5) {",
									"            console.log('Exceeded retries');",
									"",
									"            throw 'Exceeded retries';",
									"        } else if (response.data[pm.environment.get('taskId')] === 'in-progress') {",
									"            pm.environment.set('syncingStatusRetryCount', currentRetryCount + 1);",
									"",
									"            pm.execution.setNextRequest('List syncing task status - until finished');",
									"        } else if (response.data[pm.environment.get('taskId')] === 'failed') {",
									"            throw 'Status: failed';",
									"        }",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"",
									"    pm.execution.setNextRequest('Delete file');",
									"} finally {",
									"    pm.environment.set('syncingStatusRetryCount', 0);",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "277ac63a-5c49-4e09-b930-30980f33ef59",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6294718-f4d1dae3-5760-41ff-85bd-bc647a80adaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"get\",\n    \"path\": \"/tasks?entityId={{collectionId}}&entityType=collection&type=collection-sync\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6294718-6a5d8064-a58b-49b3-8a9b-033fd874db02"
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Create subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c247bd8-edd1-4168-a9cb-b3fb768f4fcd",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    if (pm.response.code !== 201)  {",
									"        throw 'StatusCode: ' + pm.response.code;",
									"    }",
									"",
									"    pm.test(\"Response is an object with meta and data properties\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData).to.have.property('meta');",
									"        pm.expect(jsonData).to.have.property('data');",
									"    });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"        var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"                meta: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        action: { type: \"string\" },",
									"                        model: { type: \"string\" }",
									"                    }",
									"                },",
									"                data: {",
									"                    type: \"object\",",
									"                    properties: {},",
									"                    required: []",
									"                }",
									"            },",
									"            required: [\"meta\", \"data\"]",
									"        };",
									"",
									"        var response = pm.response.json();",
									"        pm.expect(tv4.validate(response, schema)).to.be.true;",
									"    });",
									"",
									"",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "20117414-87b7236f-a743-42a9-bf24-e434a106a84f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "test-id",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"post\",\n    \"path\": \"/subscriptions\",\n    \"body\": {\n        \"models\": [\n            {\n                \"id\": \"{{specificationId1}}\",\n                \"type\": \"specification\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "20117414-eedd2383-af9b-4f3f-afd2-547eb5a0109b"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"    var schema = {",
									"        type: \"object\",",
									"        properties: {",
									"        meta: {",
									"            type: \"object\",",
									"            properties: {",
									"            action: { type: \"string\" },",
									"            model: { type: \"string\" }",
									"            },",
									"            required: [\"action\", \"model\"]",
									"        },",
									"        data: {",
									"            type: \"object\",",
									"            properties: {",
									"            id: { type: \"string\" }",
									"            },",
									"            required: [\"id\"]",
									"        }",
									"        },",
									"        required: [\"meta\", \"data\"]",
									"    };",
									"",
									"    var response = pm.response.json();",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Validate response against saved 'id' value\", function () {",
									"        var savedId = pm.environment.get(\"fileIdToBeDeleted\");",
									"        var responseBody = pm.response.json();",
									"        var responseId = responseBody.data.id;",
									"        pm.expect(responseId).to.equal(savedId);",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-b70cb187-0b09-448e-87c9-10476c605c0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"DELETE\",\n    \"path\": \"/specifications/{{specificationId1}}/files/{{fileIdToBeDeleted}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f97e60-c674-4f40-8b9c-de124fc9231f",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test('Response body is valid', function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData).to.be.an('object');",
									"        pm.expect(jsonData).to.have.all.keys(['meta', 'data']);",
									"    });",
									"",
									"    pm.test(\"Response body.meta is valid\", function () {",
									"        const jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.meta).to.be.an('object');",
									"        pm.expect(jsonData.meta).to.have.property('model', 'SpecificationFolder');",
									"        pm.expect(jsonData.meta).to.have.property('action', 'delete');",
									"    });",
									"",
									"    pm.test(\"Response body.data is valid\", function () {",
									"        var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.data).to.be.an('object');",
									"        pm.expect(jsonData.data).to.have.all.keys('id');",
									"    });",
									"} catch (error) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-c5f24322-d876-45a8-b23f-3863937e8444",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"delete\",\n    \"path\": \"/specifications/{{specificationId1}}/folders/{{spec1FolderId1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eeafe734-6e2e-447a-95cf-e1912659bf84",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Status code is 204\", function () {",
									"        pm.response.to.have.status(204);",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "20117414-111ae736-41f3-4c2f-a573-ee2e529e26ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "test-id",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"delete\",\n    \"path\": \"/subscriptions\",\n    \"body\": {\n        \"models\": [\n            {\n                \"id\": \"{{specificationId1}}\",\n                \"type\": \"specification\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "070897ff-59ef-48cb-b3da-75c4dbcdc929",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Meta and Data objects are present in the response\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
									"        pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    });",
									"",
									"    pm.test(\"Data object contains all required keys\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data).to.include.all.keys('id', 'type', 'name', 'description', 'createdBy', 'updatedBy', 'createdAt', 'updatedAt');",
									"    });",
									"",
									"    pm.test('Data object should contain updated name', function () {",
									"        var responseData = pm.response.json();",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.data.name).to.be.equal('Updated name');",
									"    });",
									"",
									"} catch (error) {",
									"    console.log('Error:', error);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-e78ba55f-70ea-428a-a2b3-496875428b68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"patch\",\n    \"path\": \"/specifications/{{specificationId1}}\",\n    \"body\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/name\",\n            \"value\": \"Updated name\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Spec",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6872e2f5-05c7-453d-a47b-771dcae93060",
								"exec": [
									"try {",
									"    const apiBuilderRequestRetryScript = pm.require('@postman/api-builder-request-retry-script');",
									"",
									"    if (apiBuilderRequestRetryScript.retryOnFailure()) {",
									"        // We don't want to run further assertions since this request will be retried because >500 (e.g 502, 504) response code was received.",
									"        return;",
									"    }",
									"",
									"    pm.test(\"Response time is within 5 seconds\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(5000);",
									"    });",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Schema is valid\", function () {",
									"    var schema = {",
									"        type: \"object\",",
									"        properties: {",
									"        meta: {",
									"            type: \"object\",",
									"            properties: {",
									"            action: { type: \"string\" },",
									"            model: { type: \"string\" }",
									"            },",
									"            required: [\"action\", \"model\"]",
									"        },",
									"        data: {",
									"            type: \"object\",",
									"            properties: {",
									"            id: { type: \"string\" }",
									"            },",
									"            required: [\"id\"]",
									"        }",
									"        },",
									"        required: [\"meta\", \"data\"]",
									"    };",
									"",
									"    var response = pm.response.json();",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;",
									"    });",
									"",
									"    // Test for response against saved value",
									"    pm.test(\"Validate response against saved 'id' value\", function () {",
									"        var savedId = pm.environment.get(\"specificationId1\");",
									"        var responseBody = pm.response.json();",
									"        var responseId = responseBody.data.id;",
									"        pm.expect(responseId).to.equal(savedId);",
									"    });",
									"} catch (err) {",
									"    console.log('Error:', err);",
									"    console.log('Response Body', pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {
									"@postman/api-builder-request-retry-script": {
										"id": "019491be-1f51-7e13-b196-4e4fec49649f"
									}
								}
							}
						}
					],
					"id": "6294718-0d653442-f736-433b-91b8-be68bf3ed65e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"specification\",\n    \"method\": \"delete\",\n    \"path\": \"/specifications/{{specificationId1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bifrostProxyUrl}}",
							"host": [
								"{{bifrostProxyUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c47aaa3f-f612-4d79-825a-f94209b342e4",
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6294718-0a119717-4559-4328-93f3-f7da259a34d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{bifrostHost}}/collection/{{collectionId}}",
							"host": [
								"{{bifrostHost}}"
							],
							"path": [
								"collection",
								"{{collectionId}}"
							]
						},
						"description": "Generated from cURL: curl --location --globoff --request DELETE '{{baseUrl}}/collection/694899-ea8013be-34a1-4e3a-8bb4-15dc423e220d'"
					},
					"response": []
				}
			],
			"id": "6294718-3725bb20-7c15-4cd0-a29c-05d1279c0870"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{userToken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-access-token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9c393fd7-fcd5-490e-8855-3cbb58f2e544",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "12fd20ba-1c6b-4c54-a822-9990197b171b",
				"type": "text/javascript",
				"exec": [
					"if (pm.response.code >= 500) {",
					"    console.log('Response code: ', pm.response.code);",
					"    console.log('Response body: ', pm.response.text());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "6b54df67-1b24-4c7b-9738-96c00e586b85",
			"key": "baseUrl",
			"value": "https://api-specification.postman-beta.tech",
			"type": "string"
		}
	]
}