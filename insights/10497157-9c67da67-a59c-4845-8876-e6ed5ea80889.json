{
	"info": {
		"_postman_id": "6357799-fdb21f43-39db-4793-b825-a44789a495c9",
		"name": "[Beta] Back-end post-deployment tests",
		"description": "These tests access Insights APIs via the Bifrost proxy (so that they can be run in any environment.)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Insights Overview",
			"item": [
				{
					"name": "insights/overview: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f06d097b-92bd-418a-8273-d5b8f93edd63",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"categories\": {",
									"        \"type\": \"object\"",
									"      },",
									"      \"endpoint_data\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      }",
									"    },",
									"    \"required\": [\"categories\", \"endpoint_data\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Categories schema check\", function () {",
									"  const ",
									"    categories = responseBody.categories,",
									"    schema = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"Endpoints with highest error rate\": {",
									"          \"$ref\": \"#/definitions/Endpoint\"",
									"        },",
									"        \"Endpoints with most errors\": {",
									"          \"$ref\": \"#/definitions/Endpoint\"",
									"        },",
									"        \"Endpoints with new errors\": {",
									"          \"$ref\": \"#/definitions/Endpoint\"",
									"        },",
									"        \"Slowest endpoints\": {",
									"          \"$ref\": \"#/definitions/Endpoint\"",
									"        },",
									"        \"Endpoints with highest volume\": {",
									"          \"$ref\": \"#/definitions/Endpoint\" ",
									"        }",
									"      },",
									"      \"definitions\": {",
									"        \"Endpoint\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"endpoints\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"host\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"method\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"path_template\": {",
									"                    \"type\": \"string\"",
									"                  }",
									"                },",
									"                \"required\": [\"host\", \"method\", \"path_template\"]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [\"endpoints\"]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"Endpoints with highest error rate\",",
									"        \"Endpoints with most errors\",",
									"        \"Endpoints with new errors\",",
									"        \"Slowest endpoints\",",
									"        \"Endpoints with highest volume\"",
									"      ]",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, categories);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Categories schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoint_data schema check\", function () {",
									"  const ",
									"    endpoint_data = responseBody.endpoint_data,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"collection_request\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"id\": {",
									"                \"type\": \"string\"",
									"              }",
									"            }",
									"          },",
									"          \"error_count\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"error_rate\": {",
									"            \"type\": [\"number\", \"null\"]",
									"          },",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"latency_ms_p90\": {",
									"            \"type\": [\"number\", \"null\"]",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"request_count\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"collection_request\",",
									"          \"error_count\",",
									"          \"error_rate\",",
									"          \"host\",",
									"          \"latency_ms_p90\",",
									"          \"method\",",
									"          \"path_template\",",
									"          \"request_count\"",
									"        ]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoint_data);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Endpoint_data schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "09393ed3-ea20-475c-be29-2c6cb75ddffe",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-b189613e-3c39-4a1d-b7d7-5d9c30f9a80d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/{{collectionId}}/insights/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "insights/overview: 404 with a valid collection (no access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f06d097b-92bd-418a-8273-d5b8f93edd63",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "09393ed3-ea20-475c-be29-2c6cb75ddffe",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-f078742e-86bf-4ae0-b816-ee8bded059ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/1060660-0a4a74f8-6cb4-4857-9c49-02449e8a648e/insights/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "insights/overview: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f06a601-eea4-445d-80ab-48542fe4026f",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb18a3bc-c237-4501-8217-8f334d7dee21",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-56b0c47e-a06a-4ada-bfc5-52aded3bea6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/{{collectionId}}/insights/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "insights/overview: 404 collection not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a9804d3-2141-4adf-bbcb-3fce0e067663",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1bed556b-9940-4d6e-9939-f60ba7f655c9",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-2bdda7e0-f8bb-437a-8da8-37b55e9244a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/{{nonexistentCollectionId}}/insights/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-6c22405c-da23-4f89-bc25-bd3dce9b4646",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c9c5d198-ae3a-49a7-b08e-5832150e4495"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "3462fa5f-0ce8-4ace-a7ea-77d1a9e1cc6c"
					}
				}
			]
		},
		{
			"name": "Errors Overview",
			"item": [
				{
					"name": "errors/overview: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54530fde-dda5-433f-bc74-2616bd6968a8",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"error_code\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"error_count\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"last_seen\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date-time\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"error_code\", ",
									"          \"error_count\", ",
									"          \"host\", ",
									"          \"last_seen\", ",
									"          \"method\", ",
									"          \"path_template\", ",
									"          \"time_series\"",
									"        ]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ee4d5446-e295-4576-a492-37ac213a058c",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-3fd2642b-b13a-468a-b5e9-5ff77b0571d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/overview\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/overview: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97ed886d-272d-4f62-a159-561e1d4fe4b6",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9508f381-e8fe-4d60-bf61-5ff51009bfa5",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-7991b549-42a8-4a35-b1b8-293280740fdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/overview\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/overview: 404 collection not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c4d5791-a04c-462a-9d67-cff4adf4cff3",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5727f7a-4a0f-47eb-a8f5-6d836e45e390",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-d4932f08-4253-4e2c-a3b0-5fa01dc042d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{nonexistentCollectionId}}/errors/overview\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-2a302781-b9ac-48c2-999c-becce45c92dc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e4d07fb6-a388-4e65-b55e-2d39ffe92fb3"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "539e053a-07bf-4110-8940-4bedc4fc33bc"
					}
				}
			]
		},
		{
			"name": "Errors Timeline",
			"item": [
				{
					"name": "errors/timeline: 200 metric type count_error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a66ad9-8d88-44ef-8ea7-c9809251b3aa",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\", \"previous_week_boundary\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"count\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"fraction_errors\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"latency_90p\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"num_errors\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "092c322b-75a2-4ae5-8a17-c04534fa0621",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-4ba5f635-eee2-4fc9-8d7b-491cb5817b95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"COUNT_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 400 invalid metric",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a66ad9-8d88-44ef-8ea7-c9809251b3aa",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 400 and content type is JSON stating invalid metric type\", function () {",
									"  pm.response.to.have.status(400);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"",
									"  pm.expect(responseBody.akita_code).to.equal(\"BAD_REQUEST\");",
									"  pm.expect(responseBody.message).to.equal(\"invalid request: invalid metric type\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "092c322b-75a2-4ae5-8a17-c04534fa0621",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-b5feb066-4222-4710-a1e3-a9201ded4598",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"INVALID\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 200 metric type count_error (1h time range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a66ad9-8d88-44ef-8ea7-c9809251b3aa",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 3 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"num_errors\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "092c322b-75a2-4ae5-8a17-c04534fa0621",
								"exec": [
									"// Pick a random 1-hour interval within the past two weeks.",
									"const HOUR_MS = 60*60*1000;",
									"const TEST_DURATION_MS = HOUR_MS;",
									"const TWO_WEEKS_MS = 14*24*HOUR_MS;",
									"",
									"var endTimeMS = Date.now() - Math.floor(Math.random() * (TWO_WEEKS_MS - TEST_DURATION_MS));",
									"var startTimeMS = endTimeMS - TEST_DURATION_MS;",
									"",
									"pm.collectionVariables.set(",
									"    \"startTime\",",
									"    new Date(startTimeMS).toISOString(),",
									");",
									"pm.collectionVariables.set(",
									"    \"endTime\",",
									"    new Date(endTimeMS).toISOString(),",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-6624ff9f-184a-4694-ab5c-7cb58336915d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline?start_time={{startTime}}&end_time={{endTime}}\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"COUNT_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 200 metric type count_error (12h time range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a66ad9-8d88-44ef-8ea7-c9809251b3aa",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 3 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"num_errors\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "092c322b-75a2-4ae5-8a17-c04534fa0621",
								"exec": [
									"// Pick a random 12-hour interval within the past two weeks.",
									"const HOUR_MS = 60*60*1000;",
									"const TEST_DURATION_MS = 12*HOUR_MS;",
									"const TWO_WEEKS_MS = 14*24*HOUR_MS;",
									"",
									"var endTimeMS = Date.now() - Math.floor(Math.random() * (TWO_WEEKS_MS - TEST_DURATION_MS));",
									"var startTimeMS = endTimeMS - TEST_DURATION_MS;",
									"",
									"pm.collectionVariables.set(",
									"    \"startTime\",",
									"    new Date(startTimeMS).toISOString(),",
									");",
									"pm.collectionVariables.set(",
									"    \"endTime\",",
									"    new Date(endTimeMS).toISOString(),",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-8e7de972-303f-486b-96c7-c40dd0c16f7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline?start_time={{startTime}}&end_time={{endTime}}\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"COUNT_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 200 metric type count_error (1d time range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86a66ad9-8d88-44ef-8ea7-c9809251b3aa",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 3 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"num_errors\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "092c322b-75a2-4ae5-8a17-c04534fa0621",
								"exec": [
									"// Pick a random 1-day interval within the past two weeks.",
									"const HOUR_MS = 60*60*1000;",
									"const TEST_DURATION_MS = 24*HOUR_MS;",
									"const TWO_WEEKS_MS = 14*24*HOUR_MS;",
									"",
									"var endTimeMS = Date.now() - Math.floor(Math.random() * (TWO_WEEKS_MS - TEST_DURATION_MS));",
									"var startTimeMS = endTimeMS - TEST_DURATION_MS;",
									"",
									"pm.collectionVariables.set(",
									"    \"startTime\",",
									"    new Date(startTimeMS).toISOString(),",
									");",
									"pm.collectionVariables.set(",
									"    \"endTime\",",
									"    new Date(endTimeMS).toISOString(),",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-699580f9-5710-4a57-aaa9-cb842ed21202",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline?start_time={{startTime}}&end_time={{endTime}}\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"COUNT_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 200 metric type fraction_error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abe7273c-dd68-472e-9f5d-3910a7d3df30",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\", \"previous_week_boundary\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"fraction_errors\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9317df9d-54cd-488e-b732-9c6b1a69d169",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-3bb8b0fb-c4e6-4812-bea9-5ad6e0801614",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"FRACTION_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 200 metric type latency_p90",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87183562-9dfe-4b3d-98ad-4c2062c3bdb6",
								"exec": [
									"var",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoints\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\"",
									"        }",
									"      },",
									"      \"previous_week_boundary\": {",
									"        \"type\": \"string\",",
									"        \"format\": \"date-time\"",
									"      }",
									"    },",
									"    \"required\": [\"endpoints\", \"previous_week_boundary\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Endpoints schema check\", function () {",
									"  const ",
									"    endpoints = responseBody.endpoints,",
									"    schema = {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"host\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"method\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"path_template\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"time_series\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"timestamp\": {",
									"                  \"type\": \"string\",",
									"                  \"format\": \"date-time\"",
									"                },",
									"                \"value\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"latency_90p\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"rtt_90p\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  }",
									"                }",
									"              },",
									"              \"required\": [\"timestamp\", \"value\"]",
									"            }",
									"          }",
									"        },",
									"        \"required\": [\"host\", \"method\", \"path_template\", \"time_series\"]",
									"      }",
									"    };",
									"",
									"  const validationResult = ajv.validate(schema, endpoints);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"endpoints schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "99a8ceac-86cd-42b6-8434-c44df41b6088",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-6160d879-6151-4843-857a-1015d6ea86c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"LATENCY_P90\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eabe0980-c1ad-4692-8de7-682f9d6506be",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca62179b-ba75-46ea-9afb-7a0d668b4804",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-18cc0f44-09d2-4e37-b256-e827bbdd81a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{collectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"LATENCY_P90\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors/timeline: 404 collection not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5f65ae4-be71-4854-8b7a-b74d12846292",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1baf2aca-6c56-4725-80f6-b6e016eeb472",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-aefb72ae-f243-481d-9da9-9f1729e95a4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"POST\",\n  \"path\": \"/v2/collections/{{nonexistentCollectionId}}/errors/timeline\",\n  \"body\": {\n    \"endpoints\": [{\n      \"method\": \"post\",\n      \"host\": \"api.observability.postman-stage.com\",\n      \"path_template\": \"/v1/services/{service}/learn/{arg5}/async_reports\"\n    }],\n    \"metric\": \"COUNT_ERROR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-d4685345-a69f-4020-8bfa-51981931c443"
		},
		{
			"name": "Telemetry",
			"item": [
				{
					"name": "Client Running Count",
					"item": [
						{
							"name": "client/count-running: 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc0fdd05-c4d3-4340-9a80-44175b9327f0",
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"pm.test(\"Response code is 200 and content type is JSON\", function () {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"",
											"  pm.expect(responseBody).to.have.property(\"count\")",
											"  pm.expect(responseBody.count).to.be.a(\"number\")",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b115ee6-86a5-46e5-afaa-399a0a2b5d42",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6357799-6dab3728-7414-4852-b0f1-2be729235695",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/telemetry/client/count-running\",\n  \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/count-running: 403 forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "265537ce-d9ca-49e4-82b3-9e83dbb0fe30",
										"exec": [
											"pm.test(\"Response code is 403 and content type is JSON\", function () {",
											"  pm.response.to.have.status(403);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a64c22ef-1cb4-45c0-bfac-b5fed6342cb7",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "6357799-204434d7-568d-4e55-be9c-7ccc9a49d895",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/telemetry/client/count-running\",\n  \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/count-running: 404 collection not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68eadeca-c46a-4416-be25-bfe6ea83f709",
										"exec": [
											"pm.test(\"Response code is 404 and content type is JSON\", function () {",
											"  pm.response.to.have.status(404);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8402431-330e-42e8-96ac-6f9bd843f8da",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6357799-5017274f-bc64-4d03-a398-b80318c41ff2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/{{nonexistentCollectionId}}/telemetry/client/count-running\",\n    \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "6357799-e0755d38-6127-475b-a288-d2c36d722a1e"
				},
				{
					"name": "Client Telemetry Data",
					"item": [
						{
							"name": "telemetry/client: 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c597197e-a944-49c1-b17b-d028c0ce2e73",
										"exec": [
											"var",
											"  Ajv = require('ajv'),",
											"  ajv = new Ajv({ logger: console, allErrors: true }),",
											"  responseBody = pm.response.json();",
											"",
											"pm.test(\"Response code is 200 and content type is JSON\", function () {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											"pm.test(\"Response body schema check\", function () {",
											"  const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"stats\": {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"          \"type\": \"object\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [\"stats\"]",
											"  };",
											"",
											"  const validationResult = ajv.validate(schema, responseBody);",
											"  if (!validationResult) {",
											"    console.error(ajv.errors);",
											"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
											"  }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "454f016c-a974-46fa-a6d9-4f2ad8ad1e1f",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "6357799-b3f780e4-2ed1-4752-a3fa-be8755350140",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/telemetry/client\",\n  \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "telemetry/client: 200 OK Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c597197e-a944-49c1-b17b-d028c0ce2e73",
										"exec": [
											"var",
											"  Ajv = require('ajv'),",
											"  ajv = new Ajv({ logger: console, allErrors: true }),",
											"  responseBody = pm.response.json();",
											"",
											"pm.test(\"Response code is 200 and content type is JSON\", function () {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											"pm.test(\"Response body schema check\", function () {",
											"  const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"stats\": {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"          \"type\": \"object\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [\"stats\"]",
											"  };",
											"",
											"  const validationResult = ajv.validate(schema, responseBody);",
											"  if (!validationResult) {",
											"    console.error(ajv.errors);",
											"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
											"  }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "454f016c-a974-46fa-a6d9-4f2ad8ad1e1f",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "6357799-38a1d4ab-150a-46a7-bf12-4846283d964e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/telemetry/client\",\n  \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "telemetry/client: 403 forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83ad4c84-ade4-4b79-9a9a-a659ace9d67f",
										"exec": [
											"pm.test(\"Response code is 403 and content type is JSON\", function () {",
											"  pm.response.to.have.status(403);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d484a1ab-4ea8-4932-bbf3-78db0bb37d18",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "6357799-7d1b99ac-e314-4a8e-8809-2155faaf622d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/collections/{{collectionId}}/telemetry/client\",\n  \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "telemetry/client: 404 collection not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53b457cd-a82c-4bb1-a26e-7f4924105d7d",
										"exec": [
											"pm.test(\"Response code is 404 and content type is JSON\", function () {",
											"  pm.response.to.have.status(404);",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time should be less than 30 seconds\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3ed4c0c-fd55-4829-9b62-807449b19c00",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6357799-5a513206-bd45-4ec8-a61b-6b093dda4fcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/collections/{{nonexistentCollectionId}}/telemetry/client\",\n    \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "6357799-b4ef3d12-6649-448a-9bca-33c9ff36e8b9"
				}
			],
			"id": "6357799-c28b7491-55e8-438a-9f0f-6dade64a4f57"
		},
		{
			"name": "Edit a Service",
			"item": [
				{
					"name": "services/{service_id}: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fff1d7f-8e47-4e00-a7a1-239ccc673cc3",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"created_at\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"id\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"name\": {",
									"        \"type\": \"string\"",
									"      }",
									"    },",
									"    \"required\": [\"created_at\", \"id\", \"name\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Name updated\", function () {",
									"  pm.expect(responseBody.name).to.equal(\"Stage - Front\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "be95e5fa-adf3-4436-a7ce-6d2c80bf1230",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-1c925694-9995-4df5-bc25-136920bc1959",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{serviceId}}\",\n    \"body\": {\n      \"name\": \"Stage - Front\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services/{service_id}: 403 access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fff1d7f-8e47-4e00-a7a1-239ccc673cc3",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// FIXME: should be 404?",
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "be95e5fa-adf3-4436-a7ce-6d2c80bf1230",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-65b09788-14c2-47ed-bd39-b36d4dd07d85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}\",\n    \"body\": {\n      \"name\": \"Should not succeed\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services/{service_id}: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fff1d7f-8e47-4e00-a7a1-239ccc673cc3",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "91cd5f15-5112-4168-b323-eedad186b143",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-39a7c888-d075-4f83-803f-a8f59f842905",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{serviceId}}\",\n    \"body\": {\n      \"name\": \"Akita services (stage)\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services/{service_id}: 404 service not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fff1d7f-8e47-4e00-a7a1-239ccc673cc3",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "91cd5f15-5112-4168-b323-eedad186b143",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-e11540d9-314d-45a7-8f5e-5f583dfd3e68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/svc_0N159iYkn52h2h3IKt501Q\",\n    \"body\": {\n      \"name\": \"Akita services (stage)\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-1c8b1a58-b77d-4d15-9bf3-98c48daf47e9"
		},
		{
			"name": "List curated collections",
			"item": [
				{
					"name": "/{service_id}/collections: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b47caf3-8e6d-48ae-962c-8c93d9e906df",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"collections\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"collection_id\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [\"collection_id\"]",
									"        }",
									"      }",
									"    },",
									"    \"required\": [\"collections\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7853e664-01c8-4ec1-b447-3c5462cb5fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-7d77e8ff-41a0-4730-b081-7ee9f6fcfa74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/collections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/collections: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b47caf3-8e6d-48ae-962c-8c93d9e906df",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7853e664-01c8-4ec1-b447-3c5462cb5fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-5d03d2d1-6ee3-48b2-ade1-03283baeacc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/collections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/collections: 404 service not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b47caf3-8e6d-48ae-962c-8c93d9e906df",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7853e664-01c8-4ec1-b447-3c5462cb5fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-5b426fe0-2d09-4186-babc-8f1b0cdf3cbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{nonexistentServiceId}}/collections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/collections: 404 access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b47caf3-8e6d-48ae-962c-8c93d9e906df",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7853e664-01c8-4ec1-b447-3c5462cb5fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-b4135063-9593-4cfd-ab51-49a3299e5408",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/collections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{workspace_id}/collections: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b47caf3-8e6d-48ae-962c-8c93d9e906df",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"curated_collections\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"collection_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"service_id\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [\"service_id\",\"collection_id\"]",
									"        }",
									"      }",
									"    },",
									"    \"required\": [\"curated_collections\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7853e664-01c8-4ec1-b447-3c5462cb5fa3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-112795a3-7755-48f1-bfc5-b4d7d76dd7e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/workspaces/{{workspaceId}}/curated-collections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-304383c3-12e9-4783-bb38-4217d1274b93"
		},
		{
			"name": "Get service endpoints",
			"item": [
				{
					"name": "/{service_id}/endpoints: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"endpoint_data\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"endpoint\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"host\": { \"type\": \"string\" },",
									"                \"method\": { \"type\": \"string\" },",
									"                \"path_template\": { \"type\": \"string\" }",
									"              },",
									"              \"required\": [\"host\", \"method\", \"path_template\"]",
									"            },",
									"            \"performance\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"error_breakdown\": { \"type\": \"object\" },",
									"                \"latency_ms_p90\": { \"type\": [\"number\", \"null\"] },",
									"                \"num_4xx\": { \"type\": \"integer\" },",
									"                \"num_5xx\": { \"type\": \"integer\" },",
									"                \"request_count\": { \"type\": \"integer\" }",
									"              },",
									"              \"required\": [\"error_breakdown\", \"latency_ms_p90\", \"num_4xx\", \"num_5xx\", \"request_count\"]",
									"            }",
									"          },",
									"          \"required\": [\"endpoint\", \"performance\"]",
									"        }",
									"      },",
									"      \"next_offset\": { \"type\": \"integer\" },",
									"      \"num_endpoints_in_project\": { \"type\": \"integer\" },",
									"      \"summary\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"endpoint_categories\": { \"type\": \"object\" },",
									"          \"hosts\": { \"type\": \"object\" },",
									"          \"http_methods\": { \"type\": \"object\" },",
									"          \"paths\": { \"type\": \"object\" },",
									"          \"response_codes\": { \"type\": \"object\" }",
									"        },",
									"        \"required\": [\"endpoint_categories\", \"hosts\", \"http_methods\", \"paths\", \"response_codes\"]",
									"      },",
									"      \"total_count\": { \"type\": \"integer\" },",
									"      \"total_requests\": { \"type\": \"integer\" }",
									"    },",
									"    \"required\": [\"endpoint_data\", \"next_offset\", \"num_endpoints_in_project\", \"summary\", \"total_count\", \"total_requests\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-71cf7f6c-50e9-4f0e-b6c0-50bbfb2f5c3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/endpoints\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/endpoints: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-8d498285-82e8-41ce-9eb1-d46653c74de2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/endpoints\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/endpoints: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-c4430943-9b0b-4689-9318-00ad97aaff33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/endpoints\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/endpoints: 404 service not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-032c2077-2877-44a5-9eab-d62b24c135ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/svc_0N159iYkn52h2h3IKt501Q/endpoints\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-43081795-f237-4aaf-83f7-ce7a19ef0996"
		},
		{
			"name": "Get service Errors",
			"item": [
				{
					"name": "/{service_id}/errors/overview: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"endpoint_data\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"endpoint\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"host\": { \"type\": \"string\" },",
									"                            \"method\": { \"type\": \"string\" },",
									"                            \"path_template\": { \"type\": \"string\" }",
									"                        },",
									"                        \"required\": [\"host\", \"method\", \"path_template\"]",
									"                    },",
									"                    \"error_metrics\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"error_code\": {\"type\": \"integer\"},",
									"                            \"error_count\": {\"type\": \"integer\"},",
									"                            \"error_rate\": {\"type\": \"number\"},",
									"                            \"total_count\": {\"type\": \"integer\"}",
									"                        },",
									"                        \"required\": [\"error_code\",\"error_count\",\"error_rate\",\"total_count\"]",
									"                    },",
									"                    \"last_seen\": {",
									"                        \"type\":\"string\",",
									"                        \"format\": \"date-time\"",
									"                    },",
									"                    \"time_series\": {",
									"                        \"type\": \"array\",",
									"                        \"items\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"timestamp\": {",
									"                                    \"type\": \"string\",",
									"                                    \"format\": \"date-time\"",
									"                                },",
									"                                \"value\": {\"type\":\"integer\"}",
									"                            },",
									"                            \"required\": [\"timestamp\",\"value\"]",
									"                        }",
									"                    }",
									"                },",
									"                \"required\": [\"endpoint\",\"error_metrics\",\"last_seen\",\"time_series\"]            ",
									"            },",
									"        },",
									"        \"next_offset\": { \"type\": \"integer\" },",
									"        \"total_count\": { \"type\": \"integer\" },",
									"        \"summary\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"endpoint_categories\": { \"type\": \"object\" },",
									"                \"hosts\": { \"type\": \"object\" },",
									"                \"http_methods\": { \"type\": \"object\" },",
									"                \"paths\": { \"type\": \"object\" },",
									"                \"response_codes\": { \"type\": \"object\" }",
									"            },",
									"            \"required\": [\"endpoint_categories\", \"hosts\", \"http_methods\", \"paths\", \"response_codes\"]",
									"        }",
									"    },    ",
									"    \"required\": [\"endpoint_data\", \"next_offset\", \"summary\",\"total_count\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-da520fe9-c486-472a-9542-897d64a9df52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/errors/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/errors/overview: 200 OK Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-34d89871-09df-483b-97fc-1bb3042a35ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/errors/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/errors/overview: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-a1515998-bed6-441c-8a59-20b5317f71a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/errors/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/errors/overview: 404 service not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-73f54f26-e61e-49ca-87fb-fe7adfdad66f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/svc_0N159iYkn52h2h3IKt501Q/errors/overview\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-8fae11a0-e272-4fe2-b5fc-b872e67c3370"
		},
		{
			"name": "Get repo mode list",
			"item": [
				{
					"name": "/{service_id}/repro/list with no end time: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Extract timestamp and witness_token from response\", function () {",
									"    var response = pm.response.json();",
									"    pm.collectionVariables.set(\"timestamp\", response.calls[0].timestamp);",
									"    pm.collectionVariables.set(\"witness_token\", response.calls[0].witness_token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-88c580c7-1dca-4efd-ae41-f69170ba408d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/repro/list?offset=0&method=POST&host=api-observe.postman-stage.tech&path=%2Fv2%2Fworkspaces%2Fsubscribe\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/repro/list: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-d7a694ba-058a-449e-8309-a62d1343e0af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/repro/list?offset=0&method=GET&host=api-observe.postman-stage.tech&path=%2Fv2%2Fservices%2F{service}%2fcollections\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/repro/list with current time as end time: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-0a0575a0-2ef9-4655-b119-6db564654bd9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/repro/list?offset=0&method=GET&host=api-observe.postman-stage.tech&path=%2Fv2%2Fservices%2F{service}%2fcollections&end_time={{$isoTimestamp}}\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-3dfd4f74-d2ae-42d3-a76d-0703a46f6ead"
		},
		{
			"name": "Get New Relic log URL",
			"item": [
				{
					"name": "/{service_id}/integrations/nr-logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Get URL object from response and validate with regex\", function () {",
									"    const responseBody = pm.response.json();",
									"    const url = responseBody.integrations.nr_log.url;",
									"     // Validate URL with custom regex. It will check for host, path and exactly 4 query params",
									"    pm.expect(url).to.match(/^https:\\/\\/one\\.newrelic\\.com\\/launcher\\/logger\\.log-launcher\\?([^=]*=[^=]*=[^=]*=[^=]*=[^=]*$)/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-1a311520-5dbf-48c6-8685-d48ac69f4ddc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/integrations/nr-logs?timestamp={{timestamp}}&witness_token={{witness_token}}\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/integrations/nr-logs: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-a8039f8f-b706-4f57-a7b3-1b8f10159195",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/integrations/nr-logs?timestamp={{timestamp}}&witness_token={{witness_token}}\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/integrations/nr-logs: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3220fd37-6b9d-471f-8d5c-5576c1d942a7",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "769d9671-9823-4c16-ae14-080e966eb22d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-6ee8d219-1937-4777-ab24-dcecde3e76ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/integrations/nr-logs?timestamp={{timestamp}}&witness_token={{witness_token}}\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-dfe3bd23-ed4a-4cbc-842b-fc17c539c2cd"
		},
		{
			"name": "Get Agent status",
			"item": [
				{
					"name": "/{service_id}/agent-status: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"agent_status_summary\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"agents\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"agent_connection_state\": {\"type\": \"string\"},",
									"            \"agent_capture_status\": {\"type\": \"string\"},",
									"            \"debug_detail\": {\"type\": [\"string\", \"null\"]}, ",
									"            \"client_id\": {\"type\": \"string\"}, ",
									"            \"observed_starting_at\": {\"type\": \"string\"}, ",
									"            \"edit_time\":  {\"type\": \"string\"}, ",
									"            \"packet_count_summary\": {\"type\": \"object\"}",
									"          },",
									"          \"required\": [\"agent_capture_status\", \"agent_connection_state\", \"debug_detail\", \"client_id\", \"observed_starting_at\", \"edit_time\"]",
									"        }",
									"",
									"      }",
									"    },",
									"    \"required\": [\"agent_status_summary\", \"agents\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-cc79b3a3-7c9f-44c7-af62-42ff8f66f1f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/agent-status\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/agent-status: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-ecf09aa4-cb9d-44f4-947f-2610b3f6f68e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/agent-status\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/agent-status: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-a7880c38-c4ac-44a1-8efe-eee251870a02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/agent-status\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{service_id}/agent-status: 404 service not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-c471a96a-8103-4cdd-b3d1-bff94514c63d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{nonexistentServiceId}}/agent-status\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-a9e5ce65-78b9-4ca6-80cb-f782e78337b8"
		},
		{
			"name": "Get workspace services",
			"item": [
				{
					"name": "/{workspace_id}/services: 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1021f972-61ea-4bc3-865e-1bb834d55e40",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"services\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {\"type\": \"string\"},",
									"            \"service_id\": {\"type\": \"string\"}",
									"          },",
									"          \"required\": [\"name\", \"service_id\"]",
									"        }",
									"      },",
									"    },",
									"    \"required\": [\"services\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "017f9f83-fa37-4b04-aa71-f252568f89f1",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-cdc05cc9-62b3-4346-aff8-248bb3da8301",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/workspaces/{{workspaceId}}/services\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{workspace_id}/services: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1021f972-61ea-4bc3-865e-1bb834d55e40",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "017f9f83-fa37-4b04-aa71-f252568f89f1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-c73df630-7aab-44be-b5a3-c783fe5dec5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/workspaces/{{inaccessibleWorkspaceId}}/services\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{workspace_id}/services: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-f50d4012-3f07-4537-b852-1816a667caa4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/workspaces/{{workspaceId}}/services\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{workspace_id}/services: 404 workspace not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c7a2e5-0027-4743-b814-8cbf06976033",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f27163a-0629-4a18-b9dd-0c16433cc069",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-2507178a-7b94-4d5a-945a-d2f5fb4283f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/workspaces/dddddddd-eeee-7777-aaaa-ffffffffffff/services\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-65f3cbd7-9d11-4026-922e-0cbac2e959dd"
		},
		{
			"name": "Service settings",
			"item": [
				{
					"name": "Get settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5adacbb-1d15-4c30-ac6a-7d634cb82de7",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Show IP Hosts\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"    const show_ip_hosts = pm.response.json().show_ip_hosts",
									"    pm.expect(show_ip_hosts).to.be.a(\"boolean\");",
									"    pm.collectionVariables.set(\"show_ip_hosts\", show_ip_hosts);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5611e399-c956-4b2b-beb6-1f0099b3e0a2",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-e6dc99d7-16f4-4f4a-aa2e-b162c0b536b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/settings\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get settings 404 doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5adacbb-1d15-4c30-ac6a-7d634cb82de7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5611e399-c956-4b2b-beb6-1f0099b3e0a2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-77c5f4f8-0366-4e4c-9833-d5a6b6220f44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{nonexistentServiceId}}/settings\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get settings 404 unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5adacbb-1d15-4c30-ac6a-7d634cb82de7",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"// FIXME: POA-3780",
									"// pm.test(\"Resource ID is null\", function () {",
									"//     pm.expect(pm.response.json()).to.be.an('object');",
									"//     pm.expect(pm.response.json().resource_id).to.be.null();",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5611e399-c956-4b2b-beb6-1f0099b3e0a2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-fd34b749-8085-483b-a9fe-a89bf719b9aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/settings\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update settings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "576d34ef-0cb6-44b1-ad17-f8bbb1f8bb7a",
								"exec": [
									"const show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"pm.collectionVariables.set(\"show_ip_hosts\", !show_ip_hosts);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2f6ae17-1ba3-4fa4-828f-19f1941d743a",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Show IP Hosts\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"    const response_show_ip_hosts = pm.response.json().show_ip_hosts;",
									"    let original_show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"",
									"    if (typeof original_show_ip_hosts != \"boolean\") {",
									"      original_show_ip_hosts = JSON.parse(original_show_ip_hosts);",
									"    }",
									"    pm.expect(response_show_ip_hosts).to.equal(original_show_ip_hosts);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-69f27183-e6c1-48a5-ac58-47cf91522915",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{serviceId}}/settings\",\n    \"body\": {\n      \"show_ip_hosts\": {{show_ip_hosts}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update settings 404 doesn't exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "576d34ef-0cb6-44b1-ad17-f8bbb1f8bb7a",
								"exec": [
									"const show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"pm.collectionVariables.set(\"show_ip_hosts\", !show_ip_hosts);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2f6ae17-1ba3-4fa4-828f-19f1941d743a",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"  pm.response.to.have.status(404);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-215336fc-424d-4f02-9be9-99aa6d8bfdfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{nonexistentServiceId}}/settings\",\n    \"body\": {\n      \"show_ip_hosts\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update settings 403 unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "576d34ef-0cb6-44b1-ad17-f8bbb1f8bb7a",
								"exec": [
									"const show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"pm.collectionVariables.set(\"show_ip_hosts\", !show_ip_hosts);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2f6ae17-1ba3-4fa4-828f-19f1941d743a",
								"exec": [
									"// FIXME: should be 404",
									"// pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"//  pm.response.to.have.status(403);",
									"//  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"// });",
									"",
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-964985f3-4357-4220-b861-02d76c5e0c35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/settings\",\n    \"body\": {\n      \"show_ip_hosts\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert the update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "01a62070-63ca-4809-93d4-9fb4f2f96368",
								"exec": [
									"const show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"pm.collectionVariables.set(\"show_ip_hosts\", !show_ip_hosts);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b935daa7-8990-4682-8e75-b009a2558980",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Show IP Hosts\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"    const response_show_ip_hosts = pm.response.json().show_ip_hosts;",
									"    let original_show_ip_hosts = pm.collectionVariables.get(\"show_ip_hosts\");",
									"",
									"    if (typeof original_show_ip_hosts != \"boolean\") {",
									"      original_show_ip_hosts = JSON.parse(original_show_ip_hosts);",
									"    }",
									"    pm.expect(response_show_ip_hosts).to.equal(original_show_ip_hosts);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-d4c73ff1-a748-455e-8bc0-4abf29657946",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PATCH\",\n    \"path\": \"/v2/services/{{serviceId}}/settings\",\n    \"body\": {\n      \"show_ip_hosts\": {{show_ip_hosts}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-1351dbf9-4879-412a-a741-83eb75f2ff80"
		},
		{
			"name": "Path parameters",
			"item": [
				{
					"name": "Upsert path param: 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f902e9b-8553-486e-9242-8adfbc2dd592",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 201 and content type is JSON\", function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"exceptions\": { \"type\": [\"null\", \"string\"] },",
									"      \"host\": { \"type\": \"string\" },",
									"      \"id\": { \"type\": \"string\" },",
									"      \"name\": { \"type\": \"string\" },",
									"      \"path_prefix\": { \"type\": \"string\" },",
									"      \"regexes\": { \"type\": [\"null\", \"array\"] }",
									"    },",
									"    \"required\": [\"exceptions\", \"host\", \"id\", \"name\", \"path_prefix\", \"regexes\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});",
									"",
									"pm.test(\"Response values check\", function () {",
									"  pm.expect(responseBody.host).to.equal(\"api-observe.postman-stage.tech\");",
									"  pm.expect(responseBody.name).to.equal(\"test\");",
									"  pm.expect(responseBody.path_prefix).to.equal(\"/abc\");",
									"  pm.collectionVariables.set(\"path_param_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17637150-710a-47af-bd9e-2de726f2d4a7",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-0e0cce3e-0d5d-4f22-85c1-7584bcb9d06f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PUT\",\n    \"path\": \"/v2/services/{{serviceId}}/path-parameters\",\n    \"body\": {\n      \"host\": \"api-observe.postman-stage.tech\",\n      \"path_prefix\": \"/abc\",\n      \"name\": \"test\",\n      \"regexes\": [\".*\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsert path param: 403 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f902e9b-8553-486e-9242-8adfbc2dd592",
								"exec": [
									"// FIXME: should be 404?",
									"pm.test(\"Response code is 403 and content type is JSON\", function () {",
									"  pm.response.to.have.status(403);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17637150-710a-47af-bd9e-2de726f2d4a7",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-c926b82d-5eb3-493d-b4d2-a0373586cd9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"PUT\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/path-parameters\",\n    \"body\": {\n      \"host\": \"api-observe.postman-stage.tech\",\n      \"path_prefix\": \"/abc\",\n      \"name\": \"test\",\n      \"regexes\": [\".*\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get path parameter: 204 No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7e2b4fd-d294-4661-973a-a5bdad458f3a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-733ff925-a0aa-414e-bf3c-c709895f32c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/path-parameters\",\n    \"query\": {\n      \"host\": \"api-observe.postman-stage.tech\",\n      \"path_prefix\": \"/abc\"\n    },\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete path param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "420892e3-4788-48d3-8bec-344751226730",
								"exec": [
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cdd9b18c-24bc-46d1-b391-03c5e9b3ddd4",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "6357799-125dbe09-f45c-44c1-af68-c801c64b486e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"DELETE\",\n    \"path\": \"/v2/services/{{serviceId}}/path-parameters/{{path_param_id}}\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-d6e67a53-0190-40cc-a7bd-9ea68a749be6"
		},
		{
			"name": "Endpoint Listing",
			"item": [
				{
					"name": "Get Peformance Summaries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "882c61ec-54e7-4a16-a535-5f6e79c1f8b8",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({ logger: console, allErrors: true }),",
									"    responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"percent_change\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"count\": { \"type\": \"number\" },",
									"                    \"fraction_errors\": { \"type\": \"number\" },",
									"                    \"latency_90p\": { \"type\": \"number\" },",
									"                    \"num_errors\": { \"type\": \"number\" }",
									"                },",
									"                \"required\": [\"count\", \"fraction_errors\", \"latency_90p\", \"num_errors\"]",
									"            },",
									"            \"performance_stats\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"end_time\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"                        \"start_time\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"                        \"value\": {",
									"                            \"type\": \"object\",",
									"                            \"properties\": {",
									"                                \"count\": { \"type\": \"number\" },",
									"                                \"fraction_errors\": { \"type\": \"number\" },",
									"                                \"latency_90p\": { \"type\": \"number\" },",
									"                                \"num_errors\": { \"type\": \"number\" }",
									"                            },",
									"                            \"required\": [\"count\", \"fraction_errors\", \"latency_90p\", \"num_errors\"]",
									"                        }",
									"                    },",
									"                    \"required\": [\"end_time\", \"start_time\", \"value\"]",
									"                }",
									"            }",
									"        },",
									"        \"required\": [\"percent_change\", \"performance_stats\"]",
									"    };",
									"",
									"    const validationResult = ajv.validate(schema, responseBody);",
									"    if (!validationResult) {",
									"        console.error(ajv.errors);",
									"        pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-26fe5240-3799-432b-b9cd-d48d4bb88cdc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/insights/performance-summary\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": [
						{
							"id": "6357799-e3e2f31c-b480-4e74-aea8-faaa1b2f61fb",
							"name": "Get Peformance Summaries (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/insights/performance-summary\",\n    \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 13 Jun 2024 22:18:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "referrer-policy",
									"value": "same-origin"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "via",
									"value": "1.1 83e9543a0c721a5a36e6bcd3e84e87c0.cloudfront.net (CloudFront)"
								},
								{
									"key": "x-amz-cf-pop",
									"value": "ORD56-P4"
								},
								{
									"key": "x-amz-cf-id",
									"value": "irAQhgUnnQhf_vt2z8_yX_HRfbZn7XLN9ZO4NW0pO0lhYvNKSwuWIg=="
								},
								{
									"key": "server-timing",
									"value": "cdn-upstream-layer;desc=\"REC\",cdn-upstream-dns;dur=2,cdn-upstream-connect;dur=0,cdn-upstream-fbl;dur=110,request-time;dur=93.930612,cdn-cache-miss,cdn-pop;desc=\"ORD56-P4\",cdn-rid;desc=\"irAQhgUnnQhf_vt2z8_yX_HRfbZn7XLN9ZO4NW0pO0lhYvNKSwuWIg==\",cdn-downstream-fbl;dur=133"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "893574a28c911ce8-ORD"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"percent_change\": {\n        \"count\": 1.579489,\n        \"fraction_errors\": 8.25253,\n        \"latency_90p\": -3.0769231,\n        \"num_errors\": 9.962366\n    },\n    \"performance_stats\": [\n        {\n            \"end_time\": \"2024-06-06T21:00:00Z\",\n            \"start_time\": \"2024-05-30T21:00:00Z\",\n            \"value\": {\n                \"count\": 11390519,\n                \"fraction_errors\": 0.019035656,\n                \"latency_90p\": 65,\n                \"num_errors\": 216826\n            }\n        },\n        {\n            \"end_time\": \"2024-06-13T21:00:00Z\",\n            \"start_time\": \"2024-06-06T21:00:00Z\",\n            \"value\": {\n                \"count\": 11570431,\n                \"fraction_errors\": 0.02060658,\n                \"latency_90p\": 63,\n                \"num_errors\": 238427\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Performance Summaries: 404 inaccessible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "882c61ec-54e7-4a16-a535-5f6e79c1f8b8",
								"exec": [
									"pm.test(\"Response code is 404 and content type is JSON\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 30 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-e4dd9cd0-9cc9-406a-94cd-52b29e0d7747",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{inaccessibleServiceId}}/insights/performance-summary\",\n    \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": [
						{
							"id": "6357799-f206bc35-6352-47d0-8b81-a987f4b70ba8",
							"name": "Get Peformance Summaries (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"GET\",\n    \"path\": \"/v2/services/{{serviceId}}/insights/performance-summary\",\n    \"body\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 13 Jun 2024 22:18:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "referrer-policy",
									"value": "same-origin"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "via",
									"value": "1.1 83e9543a0c721a5a36e6bcd3e84e87c0.cloudfront.net (CloudFront)"
								},
								{
									"key": "x-amz-cf-pop",
									"value": "ORD56-P4"
								},
								{
									"key": "x-amz-cf-id",
									"value": "irAQhgUnnQhf_vt2z8_yX_HRfbZn7XLN9ZO4NW0pO0lhYvNKSwuWIg=="
								},
								{
									"key": "server-timing",
									"value": "cdn-upstream-layer;desc=\"REC\",cdn-upstream-dns;dur=2,cdn-upstream-connect;dur=0,cdn-upstream-fbl;dur=110,request-time;dur=93.930612,cdn-cache-miss,cdn-pop;desc=\"ORD56-P4\",cdn-rid;desc=\"irAQhgUnnQhf_vt2z8_yX_HRfbZn7XLN9ZO4NW0pO0lhYvNKSwuWIg==\",cdn-downstream-fbl;dur=133"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "893574a28c911ce8-ORD"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"percent_change\": {\n        \"count\": 1.579489,\n        \"fraction_errors\": 8.25253,\n        \"latency_90p\": -3.0769231,\n        \"num_errors\": 9.962366\n    },\n    \"performance_stats\": [\n        {\n            \"end_time\": \"2024-06-06T21:00:00Z\",\n            \"start_time\": \"2024-05-30T21:00:00Z\",\n            \"value\": {\n                \"count\": 11390519,\n                \"fraction_errors\": 0.019035656,\n                \"latency_90p\": 65,\n                \"num_errors\": 216826\n            }\n        },\n        {\n            \"end_time\": \"2024-06-13T21:00:00Z\",\n            \"start_time\": \"2024-06-06T21:00:00Z\",\n            \"value\": {\n                \"count\": 11570431,\n                \"fraction_errors\": 0.02060658,\n                \"latency_90p\": 63,\n                \"num_errors\": 238427\n            }\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "6357799-891623bb-d4cb-4813-8ff7-d194af96e708"
		},
		{
			"name": "Team",
			"item": [
				{
					"name": "Get Team Top Endpoints",
					"id": "6357799-86b4b3d4-613b-4098-bb34-c0cf2dccdcda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/team/top_endpoints\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Team Overview",
					"id": "6357799-93fce558-b387-4ad1-86e0-8cd0a11f80e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/team/overview\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Team Overview: 403 forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a4b43fa-a27f-4ab0-9cf5-5e0db5424336",
								"exec": [
									"pm.test(\"Response code is 403 and content type is JSON\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time should be less than 30 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-db9bf5d4-0970-4336-8f83-eb5a784cd930",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"service\": \"akita\",\n  \"method\": \"GET\",\n  \"path\": \"/v2/team/overview\",\n  \"body\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-ec8762fc-dc49-4f26-846c-3ede23f181ab"
		},
		{
			"name": "Subscription endpoints",
			"item": [
				{
					"name": "Subscribe to workspace events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1058b3d-c319-49e0-a3df-8e18ef72f616",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"success\": {",
									"        \"type\": \"boolean\",",
									"      },",
									"    },",
									"    \"required\": [\"success\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-2d53027e-c790-4dbc-8c26-6b78bb1fee43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "{{socketId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"POST\",\n    \"path\": \"/v2/workspaces/subscribe\",\n    \"body\": {\n        \"workspace_id\": [\n            \"{{workspaceId}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscribe to service events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b44b35d-981d-4227-a8df-a5981df285eb",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"success\": {",
									"        \"type\": \"boolean\",",
									"      },",
									"    },",
									"    \"required\": [\"success\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-3bc28835-4ac3-488f-a7d0-bd63420f8594",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "{{socketId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"POST\",\n    \"path\": \"/v2/services/subscribe\",\n    \"body\": {\n        \"service_id\": [\n            \"{{serviceId}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe from workspace events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c042907a-0a90-48f3-becc-bf90e3f821a9",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"success\": {",
									"        \"type\": \"boolean\",",
									"      },",
									"    },",
									"    \"required\": [\"success\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-d83d9c38-95fb-4396-b2bf-ad43bc357ba7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "{{socketId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"POST\",\n    \"path\": \"/v2/workspaces/unsubscribe\",\n    \"body\": {\n        \"workspace_id\": [\n            \"{{workspaceId}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe from service events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b44b35d-981d-4227-a8df-a5981df285eb",
								"exec": [
									"var ",
									"  Ajv = require('ajv'),",
									"  ajv = new Ajv({ logger: console, allErrors: true }),",
									"  responseBody = pm.response.json();",
									"",
									"pm.test(\"Response code is 200 and content type is JSON\", function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time should be less than 10 seconds\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response body schema check\", function () {",
									"  const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"success\": {",
									"        \"type\": \"boolean\",",
									"      },",
									"    },",
									"    \"required\": [\"success\"]",
									"  };",
									"",
									"  const validationResult = ajv.validate(schema, responseBody);",
									"  if (!validationResult) {",
									"    console.error(ajv.errors);",
									"    pm.expect.fail(\"Response body schema validation failed, check console for more details\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6357799-8eb6681d-88a5-4c71-9874-b34d220549ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-socket-id",
								"value": "{{socketId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"akita\",\n    \"method\": \"POST\",\n    \"path\": \"/v2/services/unsubscribe\",\n    \"body\": {\n        \"service_id\": [\n            \"{{serviceId}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "6357799-36a8ea58-a6fd-4e69-949f-88fd490d868f"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-access-token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "62208008-0af0-4a5a-80aa-e52b3b113f19",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9f62f3fe-7e74-4734-b23e-be1ae65176e5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "76794af1963d85f4ac90b6363777c1bd862696ba073fde7654bd2d8db90b8997fe17386e85b3c13648a9754ed2eb8770a71643696f3a83440e951e9a41dcbaab"
		},
		{
			"key": "baseUrl",
			"value": "https://postman.postman-beta.co/_api/ws/proxy"
		},
		{
			"key": "collectionId",
			"value": "1061965-1b820ab2-c1c7-4365-8ef6-7fdb2523ec0e"
		},
		{
			"key": "serviceId",
			"value": "svc_75Vyb3XzpCkJmZcC4py2QE"
		},
		{
			"key": "workspaceId",
			"value": "47d1b387-2485-482a-bf62-46ddd70a6d1e"
		},
		{
			"key": "show_ip_hosts",
			"value": "false"
		},
		{
			"key": "path_param_id",
			"value": "ppx_7BOqUuzcWnl6Mu1r204btF"
		},
		{
			"key": "nonexistentCollectionId",
			"value": "11111111-deadbeef-3333-4444-5555-666677778888"
		},
		{
			"key": "timestamp",
			"value": ""
		},
		{
			"key": "witness_token",
			"value": ""
		},
		{
			"key": "startTime",
			"value": ""
		},
		{
			"key": "endTime",
			"value": ""
		}
	]
}
